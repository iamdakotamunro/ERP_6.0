using ERP.DAL.Implement.Inventory;
using ERP.DAL.Interface.IInventory;
using ERP.Enum;
using ERP.Enum.Attribute;
using ERP.Environment;
using ERP.Model;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using ERP.UI.Web.Common;
using ERP.UI.Web.Base;
using System.Text;
using Telerik.Web.UI;

namespace ERP.UI.Web.CostReport
{
    /// <summary>
    /// 费用发票——查看科目
    /// </summary>
    public partial class CostReport_InvoiceOperationSubjectView : WindowsPage
    {
        private static readonly ICostReportBill _costReportBill = new CostReportBillDal(GlobalConfig.DB.FromType.Write);

        #region 属性
        /// <summary>
        /// 票据信息模型
        /// </summary>
        private CostReportBillInfo CostReportBillInfo
        {
            get
            {
                if (ViewState["CostReportBillInfo"] == null)
                {
                    return null;
                }
                return (CostReportBillInfo)ViewState["CostReportBillInfo"];
            }
            set { ViewState["CostReportBillInfo"] = value; }
        }
        #endregion

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                var billId = Request.QueryString["BillId"];
                if (!string.IsNullOrEmpty(billId))
                {
                    LoadBillData(billId);//初始化页面数据
                }
            }
        }

        //初始化页面数据
        protected void LoadBillData(string billId)
        {
            CostReportBillInfo model = CostReportBillInfo = _costReportBill.Getlmshop_CostReportBillByBillId(new Guid(billId));



        }

        //保存数据
        protected void btn_Save_Click(object sender, EventArgs e)
        {
            #region 验证数据
            var errorMsg = CheckData();
            if (!string.IsNullOrEmpty(errorMsg))
            {
                MessageBox.Show(this, errorMsg);
                return;
            }
            #endregion

            var invoiceType = Request.QueryString["InvoiceType"];
            if (int.Parse(invoiceType).Equals((int)CostReportInvoiceType.VatInvoice))
            {

            }
            var result = _costReportBill.Updatelmshop_CostReportBillByBillId(CostReportBillInfo);
            if (result)
            {
                string remark = ERP.UI.Web.Common.WebControl.RetrunUserAndTime("【票据修改】");
                _costReportBill.Updatelmshop_CostReportBillRemarkByBillId(remark, CostReportBillInfo.BillId);
                MessageBox.AppendScript(this, "CloseAndRebind();");
            }
            else
            {
                MessageBox.Show(this, "保存失败！");
            }
        }

        //验证数据
        protected string CheckData()
        {
            var errorMsg = new StringBuilder();


            return errorMsg.ToString();
        }

        protected void RadGrid1_NeedDataSource(object sender, GridNeedDataSourceEventArgs e)
        {
            GridDataBind();
        }

        private void GridDataBind()
        {
            List<SubjectInfo> list = new List<SubjectInfo>();
            list.Add(new SubjectInfo()
            {
                SubjectName = "一级科目-二级科目",
                Amount = 2.22m
            });
            list.Add(new SubjectInfo()
            {
                SubjectName = "一级科目-二级科目",
                Amount = 3m
            });
            RadGrid1.DataSource = list;
        }

        protected void RadGrid1_ItemDataBound(object sender, GridItemEventArgs e)
        {
            if (e.Item.ItemType == GridItemType.Item || e.Item.ItemType == GridItemType.AlternatingItem)
            {
            }
        }


        protected void RadGrid1_ItemCreated(object sender, GridItemEventArgs e)
        {
            //(RadGrid1.MasterTableView.AutoGeneratedColumns[0] as GridBoundColumn).MaxLength = 5;
            //GridEditableItem item = e.Item as GridEditableItem;
            //if (item != null && e.Item.IsInEditMode && e.Item.ItemIndex != -1)
            //{
            //    //(item.EditManager.GetColumnEditor("SubjectName").ContainerControl.Controls[0] as TextBox).Enabled = false;
            //}
        }

        protected void RadGrid1_ItemUpdated(object source, Telerik.Web.UI.GridUpdatedEventArgs e)
        {
            if (e.Exception != null)
            {
                e.KeepInEditMode = true;
                e.ExceptionHandled = true;
                DisplayMessage(true, "Customer " + e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["SubjectName"] + " cannot be updated due to invalid data.");
            }
            else
            {
                DisplayMessage(false, "Customer " + e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["SubjectName"] + " updated");
            }
        }

        protected void RadGrid1_ItemInserted(object source, GridInsertedEventArgs e)
        {
            if (e.Exception != null)
            {
                e.ExceptionHandled = true;
                e.KeepInInsertMode = true;
                DisplayMessage(true, "Customer cannot be inserted due to invalid data.");
            }
            else
            {
                DisplayMessage(false, "Customer inserted");
            }
        }

        protected void RadGrid1_ItemDeleted(object source, GridDeletedEventArgs e)
        {
            if (e.Exception != null)
            {
                e.ExceptionHandled = true;
                DisplayMessage(true, "Customer " + e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["SubjectName"] + " cannot be deleted.");
            }
            else
            {
                DisplayMessage(false, "Customer " + e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["SubjectName"] + " deleted");
            }
        }
        
        private void DisplayMessage(bool isError, string text)
        {
            Label label = (isError) ? this.Label1 : this.Label2;
            label.Text = text;
        }

    }
    
}